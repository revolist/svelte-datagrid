/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@revolist/revogrid';


interface RevogrClipboardProps {
  
  /** If readonly mode - disabled Paste event */
  readonly?: Components.RevogrClipboard["readonly"]
}

interface RevogrClipboardEvents {
  
  /** Paste 1. Fired before paste applied to the grid */
  beforepaste: Parameters<JSX.RevogrClipboard["onBeforepaste"]>[0]
  
  /** Paste 2. Fired before paste applied to the grid and after data parsed */
  beforepasteapply: Parameters<JSX.RevogrClipboard["onBeforepasteapply"]>[0]
  
  /** Paste 3. Internal method. When data region is ready pass it to the top. */
  pasteregion: Parameters<JSX.RevogrClipboard["onPasteregion"]>[0]
  
  /** Paste 4. Fired after paste applied to the grid */
  afterpasteapply: Parameters<JSX.RevogrClipboard["onAfterpasteapply"]>[0]
  
  /** Cut 1. Fired before cut triggered */
  beforecut: Parameters<JSX.RevogrClipboard["onBeforecut"]>[0]
  
  /** Cut 2. Clears region when cut is done */
  clearregion: Parameters<JSX.RevogrClipboard["onClearregion"]>[0]
  
  /** Copy 1. Fired before copy triggered */
  beforecopy: Parameters<JSX.RevogrClipboard["onBeforecopy"]>[0]
  
  /** Copy Method 1. Fired before copy applied to the clipboard from outside. */
  beforecopyapply: Parameters<JSX.RevogrClipboard["onBeforecopyapply"]>[0]
  
  /** Copy 2. Fired when region copied */
  copyregion: Parameters<JSX.RevogrClipboard["onCopyregion"]>[0]
}

interface RevogrClipboardSlots {
  default: any
}
  
/* generated by Svelte v4.2.15 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import "svelte/internal/disclose-version";
import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let revogr_clipboard;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			revogr_clipboard = element("revogr-clipboard");
			if (default_slot) default_slot.c();
			set_custom_element_data(revogr_clipboard, "readonly", /*readonly*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, revogr_clipboard, anchor);

			if (default_slot) {
				default_slot.m(revogr_clipboard, null);
			}

			/*revogr_clipboard_binding*/ ctx[7](revogr_clipboard);
			current = true;

			if (!mounted) {
				dispose = [
					listen(revogr_clipboard, "beforepaste", /*onEvent*/ ctx[2]),
					listen(revogr_clipboard, "beforepasteapply", /*onEvent*/ ctx[2]),
					listen(revogr_clipboard, "pasteregion", /*onEvent*/ ctx[2]),
					listen(revogr_clipboard, "afterpasteapply", /*onEvent*/ ctx[2]),
					listen(revogr_clipboard, "beforecut", /*onEvent*/ ctx[2]),
					listen(revogr_clipboard, "clearregion", /*onEvent*/ ctx[2]),
					listen(revogr_clipboard, "beforecopy", /*onEvent*/ ctx[2]),
					listen(revogr_clipboard, "beforecopyapply", /*onEvent*/ ctx[2]),
					listen(revogr_clipboard, "copyregion", /*onEvent*/ ctx[2])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*readonly*/ 1) {
				set_custom_element_data(revogr_clipboard, "readonly", /*readonly*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(revogr_clipboard);
			}

			if (default_slot) default_slot.d(detaching);
			/*revogr_clipboard_binding*/ ctx[7](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { readonly = undefined } = $$props;
	const doCopy = (...args) => __ref.doCopy(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(1, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function revogr_clipboard_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(1, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('readonly' in $$props) $$invalidate(0, readonly = $$props.readonly);
		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	return [
		readonly,
		__ref,
		onEvent,
		doCopy,
		getWebComponent,
		$$scope,
		slots,
		revogr_clipboard_binding
	];
}

class RevogrClipboard extends SvelteComponent {
  $$prop_def: RevogrClipboardProps;
  $$events_def: RevogrClipboardEvents;
  $$slot_def: RevogrClipboardSlots;

  $on<K extends keyof RevogrClipboardEvents>(type: K, callback: (e: RevogrClipboardEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RevogrClipboardProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			readonly: 0,
			doCopy: 3,
			getWebComponent: 4
		});
	}

	
  /**  */
 get doCopy(): Components.RevogrClipboard["doCopy"] {
		return this.$$.ctx[3];
	}

	get getWebComponent(): HTMLRevogrClipboardElement | undefined {
		return this.$$.ctx[4];
	}
}

export default RevogrClipboard;