/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type { Components, JSX } from '@revolist/revogrid';


interface RevogrFilterPanelProps {
  
  /**  */
  uuid?: Components.RevogrFilterPanel["uuid"]
  
  /**  */
  filterItems?: Components.RevogrFilterPanel["filterItems"]
  
  /**  */
  filterTypes?: Components.RevogrFilterPanel["filterTypes"]
  
  /**  */
  filterNames?: Components.RevogrFilterPanel["filterNames"]
  
  /**  */
  filterEntities?: Components.RevogrFilterPanel["filterEntities"]
  
  /**  */
  filterCaptions?: Components.RevogrFilterPanel["filterCaptions"]
  
  /**  */
  disableDynamicFiltering?: Components.RevogrFilterPanel["disableDynamicFiltering"]
}

interface RevogrFilterPanelEvents {
  
  /**  */
  filterChange: Parameters<JSX.RevogrFilterPanel["onFilterChange"]>[0]
}

interface RevogrFilterPanelSlots {
  default: any
}
  
/* generated by Svelte v4.2.15 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import "svelte/internal/disclose-version";
import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let revogr_filter_panel;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	return {
		c() {
			revogr_filter_panel = element("revogr-filter-panel");
			if (default_slot) default_slot.c();
			set_custom_element_data(revogr_filter_panel, "uuid", /*uuid*/ ctx[0]);
			set_custom_element_data(revogr_filter_panel, "disable-dynamic-filtering", /*disableDynamicFiltering*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, revogr_filter_panel, anchor);

			if (default_slot) {
				default_slot.m(revogr_filter_panel, null);
			}

			/*revogr_filter_panel_binding*/ ctx[15](revogr_filter_panel);
			current = true;

			if (!mounted) {
				dispose = listen(revogr_filter_panel, "filterChange", /*onEvent*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*uuid*/ 1) {
				set_custom_element_data(revogr_filter_panel, "uuid", /*uuid*/ ctx[0]);
			}

			if (!current || dirty & /*disableDynamicFiltering*/ 2) {
				set_custom_element_data(revogr_filter_panel, "disable-dynamic-filtering", /*disableDynamicFiltering*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(revogr_filter_panel);
			}

			if (default_slot) default_slot.d(detaching);
			/*revogr_filter_panel_binding*/ ctx[15](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { uuid = undefined } = $$props;
	let { filterItems = undefined } = $$props;
	let { filterTypes = undefined } = $$props;
	let { filterNames = undefined } = $$props;
	let { filterEntities = undefined } = $$props;
	let { filterCaptions = undefined } = $$props;
	let { disableDynamicFiltering = undefined } = $$props;
	const show = (...args) => __ref.show(...args);
	const getChanges = (...args) => __ref.getChanges(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(12, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function revogr_filter_panel_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('uuid' in $$props) $$invalidate(0, uuid = $$props.uuid);
		if ('filterItems' in $$props) $$invalidate(4, filterItems = $$props.filterItems);
		if ('filterTypes' in $$props) $$invalidate(5, filterTypes = $$props.filterTypes);
		if ('filterNames' in $$props) $$invalidate(6, filterNames = $$props.filterNames);
		if ('filterEntities' in $$props) $$invalidate(7, filterEntities = $$props.filterEntities);
		if ('filterCaptions' in $$props) $$invalidate(8, filterCaptions = $$props.filterCaptions);
		if ('disableDynamicFiltering' in $$props) $$invalidate(1, disableDynamicFiltering = $$props.disableDynamicFiltering);
		if ('$$scope' in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, filterItems*/ 4112) {
			$: if (__mounted) setProp('filterItems', filterItems);
		}

		if ($$self.$$.dirty & /*__mounted, filterTypes*/ 4128) {
			$: if (__mounted) setProp('filterTypes', filterTypes);
		}

		if ($$self.$$.dirty & /*__mounted, filterNames*/ 4160) {
			$: if (__mounted) setProp('filterNames', filterNames);
		}

		if ($$self.$$.dirty & /*__mounted, filterEntities*/ 4224) {
			$: if (__mounted) setProp('filterEntities', filterEntities);
		}

		if ($$self.$$.dirty & /*__mounted, filterCaptions*/ 4352) {
			$: if (__mounted) setProp('filterCaptions', filterCaptions);
		}
	};

	return [
		uuid,
		disableDynamicFiltering,
		__ref,
		onEvent,
		filterItems,
		filterTypes,
		filterNames,
		filterEntities,
		filterCaptions,
		show,
		getChanges,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		revogr_filter_panel_binding
	];
}

class RevogrFilterPanel extends SvelteComponent {
  $$prop_def: RevogrFilterPanelProps;
  $$events_def: RevogrFilterPanelEvents;
  $$slot_def: RevogrFilterPanelSlots;

  $on<K extends keyof RevogrFilterPanelEvents>(type: K, callback: (e: RevogrFilterPanelEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RevogrFilterPanelProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			uuid: 0,
			filterItems: 4,
			filterTypes: 5,
			filterNames: 6,
			filterEntities: 7,
			filterCaptions: 8,
			disableDynamicFiltering: 1,
			show: 9,
			getChanges: 10,
			getWebComponent: 11
		});
	}

	
  /**  */
 get show(): Components.RevogrFilterPanel["show"] {
		return this.$$.ctx[9];
	}

	
  /**  */
 get getChanges(): Components.RevogrFilterPanel["getChanges"] {
		return this.$$.ctx[10];
	}

	get getWebComponent(): HTMLRevogrFilterPanelElement | undefined {
		return this.$$.ctx[11];
	}
}

export default RevogrFilterPanel;