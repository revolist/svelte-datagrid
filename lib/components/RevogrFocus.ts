/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@revolist/revogrid';


interface RevogrFocusProps {
  
  /** Column type */
  colType?: Components.RevogrFocus["colType"]
  
  /** Row type */
  rowType?: Components.RevogrFocus["rowType"]
  
  /** Selection, range, focus for selection */
  selectionStore?: Components.RevogrFocus["selectionStore"]
  
  /** Dimension settings Y */
  dimensionRow?: Components.RevogrFocus["dimensionRow"]
  
  /** Dimension settings X */
  dimensionCol?: Components.RevogrFocus["dimensionCol"]
  
  /** Data rows source */
  dataStore?: Components.RevogrFocus["dataStore"]
  
  /** Column source */
  colData?: Components.RevogrFocus["colData"]
  
  /** Focus template custom function. Can be used to render custom focus layer. */
  focusTemplate?: Components.RevogrFocus["focusTemplate"]
}

interface RevogrFocusEvents {
  
  /** Before focus render event.
Can be prevented by event.preventDefault().
If preventDefault used slot will be rendered. */
  beforefocusrender: Parameters<JSX.RevogrFocus["onBeforefocusrender"]>[0]
  
  /** Before focus changed verify if it's in view and scroll viewport into this view
Can be prevented by event.preventDefault() */
  beforescrollintoview: Parameters<JSX.RevogrFocus["onBeforescrollintoview"]>[0]
  
  /** Used to setup properties after focus was rendered */
  afterfocus: Parameters<JSX.RevogrFocus["onAfterfocus"]>[0]
}

interface RevogrFocusSlots {
  default: any
}
  
/* generated by Svelte v4.2.15 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import "svelte/internal/disclose-version";
import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let revogr_focus;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[13].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

	return {
		c() {
			revogr_focus = element("revogr-focus");
			if (default_slot) default_slot.c();
			set_custom_element_data(revogr_focus, "col-type", /*colType*/ ctx[0]);
			set_custom_element_data(revogr_focus, "row-type", /*rowType*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, revogr_focus, anchor);

			if (default_slot) {
				default_slot.m(revogr_focus, null);
			}

			/*revogr_focus_binding*/ ctx[14](revogr_focus);
			current = true;

			if (!mounted) {
				dispose = [
					listen(revogr_focus, "beforefocusrender", /*onEvent*/ ctx[3]),
					listen(revogr_focus, "beforescrollintoview", /*onEvent*/ ctx[3]),
					listen(revogr_focus, "afterfocus", /*onEvent*/ ctx[3])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[12],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*colType*/ 1) {
				set_custom_element_data(revogr_focus, "col-type", /*colType*/ ctx[0]);
			}

			if (!current || dirty & /*rowType*/ 2) {
				set_custom_element_data(revogr_focus, "row-type", /*rowType*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(revogr_focus);
			}

			if (default_slot) default_slot.d(detaching);
			/*revogr_focus_binding*/ ctx[14](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { colType } = $$props;
	let { rowType } = $$props;
	let { selectionStore } = $$props;
	let { dimensionRow } = $$props;
	let { dimensionCol } = $$props;
	let { dataStore } = $$props;
	let { colData } = $$props;
	let { focusTemplate = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(11, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(2, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function revogr_focus_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(2, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('colType' in $$props) $$invalidate(0, colType = $$props.colType);
		if ('rowType' in $$props) $$invalidate(1, rowType = $$props.rowType);
		if ('selectionStore' in $$props) $$invalidate(4, selectionStore = $$props.selectionStore);
		if ('dimensionRow' in $$props) $$invalidate(5, dimensionRow = $$props.dimensionRow);
		if ('dimensionCol' in $$props) $$invalidate(6, dimensionCol = $$props.dimensionCol);
		if ('dataStore' in $$props) $$invalidate(7, dataStore = $$props.dataStore);
		if ('colData' in $$props) $$invalidate(8, colData = $$props.colData);
		if ('focusTemplate' in $$props) $$invalidate(9, focusTemplate = $$props.focusTemplate);
		if ('$$scope' in $$props) $$invalidate(12, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, selectionStore*/ 2064) {
			$: if (__mounted) setProp('selectionStore', selectionStore);
		}

		if ($$self.$$.dirty & /*__mounted, dimensionRow*/ 2080) {
			$: if (__mounted) setProp('dimensionRow', dimensionRow);
		}

		if ($$self.$$.dirty & /*__mounted, dimensionCol*/ 2112) {
			$: if (__mounted) setProp('dimensionCol', dimensionCol);
		}

		if ($$self.$$.dirty & /*__mounted, dataStore*/ 2176) {
			$: if (__mounted) setProp('dataStore', dataStore);
		}

		if ($$self.$$.dirty & /*__mounted, colData*/ 2304) {
			$: if (__mounted) setProp('colData', colData);
		}

		if ($$self.$$.dirty & /*__mounted, focusTemplate*/ 2560) {
			$: if (__mounted) setProp('focusTemplate', focusTemplate);
		}
	};

	return [
		colType,
		rowType,
		__ref,
		onEvent,
		selectionStore,
		dimensionRow,
		dimensionCol,
		dataStore,
		colData,
		focusTemplate,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		revogr_focus_binding
	];
}

class RevogrFocus extends SvelteComponent {
  $$prop_def: RevogrFocusProps;
  $$events_def: RevogrFocusEvents;
  $$slot_def: RevogrFocusSlots;

  $on<K extends keyof RevogrFocusEvents>(type: K, callback: (e: RevogrFocusEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RevogrFocusProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			colType: 0,
			rowType: 1,
			selectionStore: 4,
			dimensionRow: 5,
			dimensionCol: 6,
			dataStore: 7,
			colData: 8,
			focusTemplate: 9,
			getWebComponent: 10
		});
	}

	get getWebComponent(): HTMLRevogrFocusElement | undefined {
		return this.$$.ctx[10];
	}
}

export default RevogrFocus;