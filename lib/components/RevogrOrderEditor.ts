/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@revolist/revogrid';


interface RevogrOrderEditorProps {
  
  /** Parent element */
  parent?: Components.RevogrOrderEditor["parent"]
  
  /** Dimension settings Y */
  dimensionRow?: Components.RevogrOrderEditor["dimensionRow"]
  
  /** Dimension settings X */
  dimensionCol?: Components.RevogrOrderEditor["dimensionCol"]
  
  /** Static stores, not expected to change during component lifetime */
  dataStore?: Components.RevogrOrderEditor["dataStore"]
}

interface RevogrOrderEditorEvents {
  
  /** Row drag started */
  rowdragstartinit: Parameters<JSX.RevogrOrderEditor["onRowdragstartinit"]>[0]
  
  /** Row drag ended started */
  rowdragendinit: Parameters<JSX.RevogrOrderEditor["onRowdragendinit"]>[0]
  
  /** Row move started */
  rowdragmoveinit: Parameters<JSX.RevogrOrderEditor["onRowdragmoveinit"]>[0]
  
  /** Row mouse move started */
  rowdragmousemove: Parameters<JSX.RevogrOrderEditor["onRowdragmousemove"]>[0]
  
  /** Row dragged, new range ready to be applied */
  rowdropinit: Parameters<JSX.RevogrOrderEditor["onRowdropinit"]>[0]
}

interface RevogrOrderEditorSlots {
  default: any
}
  
/* generated by Svelte v4.2.18 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	run_all,
	safe_not_equal,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import "svelte/internal/disclose-version";
import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let revogr_order_editor;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	return {
		c() {
			revogr_order_editor = element("revogr-order-editor");
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			insert(target, revogr_order_editor, anchor);

			if (default_slot) {
				default_slot.m(revogr_order_editor, null);
			}

			/*revogr_order_editor_binding*/ ctx[13](revogr_order_editor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(revogr_order_editor, "rowdragstartinit", /*onEvent*/ ctx[1]),
					listen(revogr_order_editor, "rowdragendinit", /*onEvent*/ ctx[1]),
					listen(revogr_order_editor, "rowdragmoveinit", /*onEvent*/ ctx[1]),
					listen(revogr_order_editor, "rowdragmousemove", /*onEvent*/ ctx[1]),
					listen(revogr_order_editor, "rowdropinit", /*onEvent*/ ctx[1])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(revogr_order_editor);
			}

			if (default_slot) default_slot.d(detaching);
			/*revogr_order_editor_binding*/ ctx[13](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { parent = undefined } = $$props;
	let { dimensionRow = undefined } = $$props;
	let { dimensionCol = undefined } = $$props;
	let { dataStore = undefined } = $$props;
	const dragStart = (...args) => __ref.dragStart(...args);
	const endOrder = (...args) => __ref.endOrder(...args);
	const clearOrder = (...args) => __ref.clearOrder(...args);
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(10, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(0, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function revogr_order_editor_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(0, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('parent' in $$props) $$invalidate(2, parent = $$props.parent);
		if ('dimensionRow' in $$props) $$invalidate(3, dimensionRow = $$props.dimensionRow);
		if ('dimensionCol' in $$props) $$invalidate(4, dimensionCol = $$props.dimensionCol);
		if ('dataStore' in $$props) $$invalidate(5, dataStore = $$props.dataStore);
		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, parent*/ 1028) {
			$: if (__mounted) setProp('parent', parent);
		}

		if ($$self.$$.dirty & /*__mounted, dimensionRow*/ 1032) {
			$: if (__mounted) setProp('dimensionRow', dimensionRow);
		}

		if ($$self.$$.dirty & /*__mounted, dimensionCol*/ 1040) {
			$: if (__mounted) setProp('dimensionCol', dimensionCol);
		}

		if ($$self.$$.dirty & /*__mounted, dataStore*/ 1056) {
			$: if (__mounted) setProp('dataStore', dataStore);
		}
	};

	return [
		__ref,
		onEvent,
		parent,
		dimensionRow,
		dimensionCol,
		dataStore,
		dragStart,
		endOrder,
		clearOrder,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		revogr_order_editor_binding
	];
}

class RevogrOrderEditor extends SvelteComponent {
  $$prop_def: RevogrOrderEditorProps;
  $$events_def: RevogrOrderEditorEvents;
  $$slot_def: RevogrOrderEditorSlots;

  $on<K extends keyof RevogrOrderEditorEvents>(type: K, callback: (e: RevogrOrderEditorEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<RevogrOrderEditorProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			parent: 2,
			dimensionRow: 3,
			dimensionCol: 4,
			dataStore: 5,
			dragStart: 6,
			endOrder: 7,
			clearOrder: 8,
			getWebComponent: 9
		});
	}

	
  /**  */
 get dragStart(): Components.RevogrOrderEditor["dragStart"] {
		return this.$$.ctx[6];
	}

	
  /**  */
 get endOrder(): Components.RevogrOrderEditor["endOrder"] {
		return this.$$.ctx[7];
	}

	
  /**  */
 get clearOrder(): Components.RevogrOrderEditor["clearOrder"] {
		return this.$$.ctx[8];
	}

	get getWebComponent(): HTMLRevogrOrderEditorElement | undefined {
		return this.$$.ctx[9];
	}
}

export default RevogrOrderEditor;